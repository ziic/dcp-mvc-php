<?php

namespace MVC;

require_once dirname(__FILE__) . '/../Source/UrlRouteModule.php';

/**
 * Test class for UrlRouteModule.
 * Generated by PHPUnit on 2011-06-01 at 12:27:23.
 */
class UrlRouteModuleTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var UrlRouteModule
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    

    /**
     * @todo Implement testGetRouteData().
     */
    public function testGetRouteData_ActionForFile() {
        $route1 = new Route("{controller}/{action}.php", 
                 array("{controller}" => "Home","{action}" => "Index"));                
        
        $routes = array($route1);        
        $this->object = new UrlRouteModule($routes);
        $r = $this->object->GetRouteData("Account/Logon.php");
        
        $this->assertEquals("Logon", $r["{action}"]);
        
    }
    
    /**
     * @todo Implement testGetRouteData().
     */
    public function testGetRouteData_ClearMVCUrls() {
        $route1 = new Route(
                            "{controller}/{action}/{id}", 
                            array("{controller}" => "Home","{action}" => "Index", "{id}" => 5)
                        );                
        
        $routes = array($route1);        
        $this->object = new UrlRouteModule($routes);
        
        $r = $this->object->GetRouteData("");
        $this->assertEquals($r["{controller}"], "Home");
        $this->assertEquals($r["{action}"], "Index");
        $this->assertEquals($r["{id}"], 5);
                
        $r = $this->object->GetRouteData("Account");
        $this->assertEquals($r["{controller}"], "Account");
        $this->assertEquals($r["{action}"], "Index");
        $this->assertEquals($r["{id}"], 5);
        
        $r = $this->object->GetRouteData("Account/Logon");        
        $this->assertEquals($r["{controller}"], "Account");
        $this->assertEquals($r["{action}"], "Logon");
        $this->assertEquals($r["{id}"], 5);
        
        $r = $this->object->GetRouteData("Account/Logon/7");
        $this->assertEquals($r["{controller}"], "Account");
        $this->assertEquals($r["{action}"], "Logon");
        $this->assertEquals($r["{id}"], 7);        
    
        
    }
    
    public function testGetRoute_NotFountIfConstrains() 
    {
           $route1 = new Route(
                            "{controller}/{action}/{id}", 
                            array("{controller}" => "Home","{action}" => "Index", "{id}" => 5)
                        ); 
           $routes = array($route1);   
           $this->object = new UrlRouteModule($routes);
           
           try
           {
                $r = $this->object->GetRouteData("Account/Logon/asdf");
           }
           catch (\Exception $ex)
           {
               return;                  
           }
           $this->fail();
     }
     
     public function testGetRoute_RouteKeyFromQueryString() {
           $route1 = new Route(
                            "{controller}/{action}.php?param={id}", 
                            array("{controller}" => "Home","{action}" => "Index", "{id}" => 5)
                        ); 
           $routes = array($route1);   
           $this->object = new UrlRouteModule($routes);
           
           $r = $this->object->GetRouteData("Account/Logon.php?param=8");
           
           $this->assertEquals(8, $r["{id}"]);
     }

}

?>
